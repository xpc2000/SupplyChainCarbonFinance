<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.chaincarbon.mapper.FinanceInstitutionMapper">
  <resultMap id="BaseResultMap" type="com.example.chaincarbon.model.pojo.FinanceInstitution">
    <id column="Company_Name" jdbcType="VARCHAR" property="companyName" />
    <result column="Email" jdbcType="VARCHAR" property="email" />
    <result column="Login_password" jdbcType="VARCHAR" property="loginPassword" />
    <result column="Classification" jdbcType="VARCHAR" property="classification" />
    <result column="Pledge_approval" jdbcType="VARCHAR" property="pledgeApproval" />
    <result column="Pledge_signing" jdbcType="VARCHAR" property="pledgeSigning" />
    <result column="Factoring_compliance_review" jdbcType="VARCHAR" property="factoringComplianceReview" />
    <result column="Factoring_purchase_signing" jdbcType="VARCHAR" property="factoringPurchaseSigning" />
    <result column="Carbon_ticket_number" jdbcType="INTEGER" property="carbonTicketNumber" />
    <result column="Blockchain_wallet_key" jdbcType="VARCHAR" property="blockchainWalletKey" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    Company_Name, Email, Login_password, Classification, Pledge_approval, Pledge_signing, 
    Factoring_compliance_review, Factoring_purchase_signing, Carbon_ticket_number, Blockchain_wallet_key
  </sql>
  <select id="selectByExample" parameterType="com.example.chaincarbon.model.pojo.FinanceInstitutionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from financial_institution
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from financial_institution
    where Company_Name = #{companyName,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from financial_institution
    where Company_Name = #{companyName,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.chaincarbon.model.pojo.FinanceInstitution">
    insert into financial_institution (Company_Name, Email, Login_password, 
      Classification, Pledge_approval, Pledge_signing, 
      Factoring_compliance_review, Factoring_purchase_signing, 
      Carbon_ticket_number, Blockchain_wallet_key
      )
    values (#{companyName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{loginPassword,jdbcType=VARCHAR}, 
      #{classification,jdbcType=VARCHAR}, #{pledgeApproval,jdbcType=VARCHAR}, #{pledgeSigning,jdbcType=VARCHAR}, 
      #{factoringComplianceReview,jdbcType=VARCHAR}, #{factoringPurchaseSigning,jdbcType=VARCHAR}, 
      #{carbonTicketNumber,jdbcType=INTEGER}, #{blockchainWalletKey,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.chaincarbon.model.pojo.FinanceInstitution">
    insert into financial_institution
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyName != null">
        Company_Name,
      </if>
      <if test="email != null">
        Email,
      </if>
      <if test="loginPassword != null">
        Login_password,
      </if>
      <if test="classification != null">
        Classification,
      </if>
      <if test="pledgeApproval != null">
        Pledge_approval,
      </if>
      <if test="pledgeSigning != null">
        Pledge_signing,
      </if>
      <if test="factoringComplianceReview != null">
        Factoring_compliance_review,
      </if>
      <if test="factoringPurchaseSigning != null">
        Factoring_purchase_signing,
      </if>
      <if test="carbonTicketNumber != null">
        Carbon_ticket_number,
      </if>
      <if test="blockchainWalletKey != null">
        Blockchain_wallet_key,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyName != null">
        #{companyName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="classification != null">
        #{classification,jdbcType=VARCHAR},
      </if>
      <if test="pledgeApproval != null">
        #{pledgeApproval,jdbcType=VARCHAR},
      </if>
      <if test="pledgeSigning != null">
        #{pledgeSigning,jdbcType=VARCHAR},
      </if>
      <if test="factoringComplianceReview != null">
        #{factoringComplianceReview,jdbcType=VARCHAR},
      </if>
      <if test="factoringPurchaseSigning != null">
        #{factoringPurchaseSigning,jdbcType=VARCHAR},
      </if>
      <if test="carbonTicketNumber != null">
        #{carbonTicketNumber,jdbcType=INTEGER},
      </if>
      <if test="blockchainWalletKey != null">
        #{blockchainWalletKey,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update financial_institution
    <set>
      <if test="record.companyName != null">
        Company_Name = #{record.companyName,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        Email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.loginPassword != null">
        Login_password = #{record.loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.classification != null">
        Classification = #{record.classification,jdbcType=VARCHAR},
      </if>
      <if test="record.pledgeApproval != null">
        Pledge_approval = #{record.pledgeApproval,jdbcType=VARCHAR},
      </if>
      <if test="record.pledgeSigning != null">
        Pledge_signing = #{record.pledgeSigning,jdbcType=VARCHAR},
      </if>
      <if test="record.factoringComplianceReview != null">
        Factoring_compliance_review = #{record.factoringComplianceReview,jdbcType=VARCHAR},
      </if>
      <if test="record.factoringPurchaseSigning != null">
        Factoring_purchase_signing = #{record.factoringPurchaseSigning,jdbcType=VARCHAR},
      </if>
      <if test="record.carbonTicketNumber != null">
        Carbon_ticket_number = #{record.carbonTicketNumber,jdbcType=INTEGER},
      </if>
      <if test="record.blockchainWalletKey != null">
        Blockchain_wallet_key = #{record.blockchainWalletKey,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update financial_institution
    set Company_Name = #{record.companyName,jdbcType=VARCHAR},
      Email = #{record.email,jdbcType=VARCHAR},
      Login_password = #{record.loginPassword,jdbcType=VARCHAR},
      Classification = #{record.classification,jdbcType=VARCHAR},
      Pledge_approval = #{record.pledgeApproval,jdbcType=VARCHAR},
      Pledge_signing = #{record.pledgeSigning,jdbcType=VARCHAR},
      Factoring_compliance_review = #{record.factoringComplianceReview,jdbcType=VARCHAR},
      Factoring_purchase_signing = #{record.factoringPurchaseSigning,jdbcType=VARCHAR},
      Carbon_ticket_number = #{record.carbonTicketNumber,jdbcType=INTEGER},
      Blockchain_wallet_key = #{record.blockchainWalletKey,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.chaincarbon.model.pojo.FinanceInstitution">
    update financial_institution
    <set>
      <if test="email != null">
        Email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        Login_password = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="classification != null">
        Classification = #{classification,jdbcType=VARCHAR},
      </if>
      <if test="pledgeApproval != null">
        Pledge_approval = #{pledgeApproval,jdbcType=VARCHAR},
      </if>
      <if test="pledgeSigning != null">
        Pledge_signing = #{pledgeSigning,jdbcType=VARCHAR},
      </if>
      <if test="factoringComplianceReview != null">
        Factoring_compliance_review = #{factoringComplianceReview,jdbcType=VARCHAR},
      </if>
      <if test="factoringPurchaseSigning != null">
        Factoring_purchase_signing = #{factoringPurchaseSigning,jdbcType=VARCHAR},
      </if>
      <if test="carbonTicketNumber != null">
        Carbon_ticket_number = #{carbonTicketNumber,jdbcType=INTEGER},
      </if>
      <if test="blockchainWalletKey != null">
        Blockchain_wallet_key = #{blockchainWalletKey,jdbcType=VARCHAR},
      </if>
    </set>
    where Company_Name = #{companyName,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.chaincarbon.model.pojo.FinanceInstitution">
    update financial_institution
    set Email = #{email,jdbcType=VARCHAR},
      Login_password = #{loginPassword,jdbcType=VARCHAR},
      Classification = #{classification,jdbcType=VARCHAR},
      Pledge_approval = #{pledgeApproval,jdbcType=VARCHAR},
      Pledge_signing = #{pledgeSigning,jdbcType=VARCHAR},
      Factoring_compliance_review = #{factoringComplianceReview,jdbcType=VARCHAR},
      Factoring_purchase_signing = #{factoringPurchaseSigning,jdbcType=VARCHAR},
      Carbon_ticket_number = #{carbonTicketNumber,jdbcType=INTEGER},
      Blockchain_wallet_key = #{blockchainWalletKey,jdbcType=VARCHAR}
    where Company_Name = #{companyName,jdbcType=VARCHAR}
  </update>
</mapper>